plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyVersion}"
    id 'org.openapi.generator' version "${openapiGeneratorVersion}"
    id 'jacoco'
}

group = 'pl.zajavka'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.2.RELEASE'
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // db
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'org.postgresql:postgresql'

    // api
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    implementation "javax.annotation:javax.annotation-api:${javaxAnnotationApiVersion}"
    implementation "io.swagger:swagger-annotations:${swaggerAnnotationsVersion}"
    implementation "com.google.code.findbugs:jsr305:${jsr305Version}"

    // annotation
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    //test
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    testImplementation "org.slf4j:slf4j-api:${wiremockSlf4jVersion}"
    testImplementation "com.github.tomakehurst:wiremock-standalone:${wiremockVersion}"
}

openApiGenerate {
    generatorName = "java"
    library = "webclient"
    configOptions = [
            serializableModel   : "true",
            dateLibrary         : "java8",
            serializationLibrary: "jackson"
    ]
//     outputDir = "$buildDir/generated-sources/openapi".toString()
    outputDir = project.layout.buildDirectory.dir("generated-sources/openapi").get().asFile.path
    inputSpec = "$rootDir/src/main/resources/contracts/catFacts.json".toString()
    apiPackage = "pl.zajavka.infrastructure.catFacts.api"
    modelPackage = "pl.zajavka.infrastructure.catFacts.model"
}

sourceSets {
    main {
        java.srcDirs += "$buildDir/generated-sources/openapi/src/main/java"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "pl/zajavka/api/dto/mapper",
                    "pl/zajavka/infrastructure/database/repository/mapper",
                    "pl/zajavka/infrastructure/database/entity",
                    "pl/zajavka/domain",
                    "pl/zajavka/api/dto",
                    "pl/zajavka/infrastructure/configuration",
                    "pl/zajavka/infrastructure/security/configuration",
                    "pl/zajavka/infrastructure/security/entity",
                    "pl/zajavka/infrastructure/security/mapper",
                    "pl/zajavka/infrastructure/security/service",
                    "pl/zajavka/infrastructure/catFacts/api",
                    "pl/zajavka/infrastructure/catFacts/model",
                    "pl/zajavka/infrastructure/catFacts/auth",
                    "pl/zajavka/infrastructure/catFacts"
            ])
        }))
    }

    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtmlCustom')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.5
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

compileJava.dependsOn tasks.openApiGenerate
compileJava.options.encoding = 'UTF-8'

bootJar {
    archiveFileName = "carDealershipProject.${archiveExtension.get()}"
}
jar{
    enabled = false
}